diff -urN linux-3.16.71/arch/x86/syscalls/syscall_32.tbl old_conf/arch/x86/syscalls/syscall_32.tbl
--- linux-3.16.71/arch/x86/syscalls/syscall_32.tbl	2019-09-29 09:29:55.491787529 +0530
+++ old_conf/arch/x86/syscalls/syscall_32.tbl	2019-09-29 05:35:46.635656279 +0530
@@ -361,4 +361,3 @@
 352	i386	sched_getattr		sys_sched_getattr
 353	i386	renameat2		sys_renameat2
 354	i386	seccomp			sys_seccomp
-355	i386	sh_task_info		sys_sh_task_info
diff -urN linux-3.16.71/include/linux/syscalls.h old_conf/include/linux/syscalls.h
--- linux-3.16.71/include/linux/syscalls.h	2019-09-29 09:31:01.999788150 +0530
+++ old_conf/include/linux/syscalls.h	2019-09-29 05:35:52.359656332 +0530
@@ -868,5 +868,4 @@
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
 asmlinkage long sys_seccomp(unsigned int op, unsigned int flags,
 			    const char __user *uargs);
-asmlinkage long sys_sh_task_info(pid_t pid, char *fname);
 #endif
diff -urN linux-3.16.71/Makefile old_conf/Makefile
--- linux-3.16.71/Makefile	2019-09-29 09:28:23.519786670 +0530
+++ old_conf/Makefile	2019-09-29 05:35:45.107656264 +0530
@@ -852,7 +852,7 @@
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ sh_task_info/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff -urN linux-3.16.71/sh_task_info/Makefile old_conf/sh_task_info/Makefile
--- linux-3.16.71/sh_task_info/Makefile	2019-09-29 09:27:50.283786359 +0530
+++ old_conf/sh_task_info/Makefile	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-obj-y := sh_task_info.o
diff -urN linux-3.16.71/sh_task_info/sh_task_info.c old_conf/sh_task_info/sh_task_info.c
--- linux-3.16.71/sh_task_info/sh_task_info.c	2019-09-29 09:27:02.415785912 +0530
+++ old_conf/sh_task_info/sh_task_info.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,48 +0,0 @@
-#include<linux/kernel.h>
-#include<linux/sched.h>
-#include<linux/signal.h>
-#include<linux/init.h>
-#include<linux/errno.h>
-#include<linux/module.h>
-#include<linux/syscalls.h>
-#include<linux/file.h>
-#include<linux/fs.h>
-#include<linux/fcntl.h>
-#include<asm/uaccess.h>	
-
-asmlinkage long sys_sh_task_info(pid_t inp, char *fname) {
-	struct task_struct *task;
-	int fl = 0;
-	struct file *file;
-	loff_t pos = 0;
-	int fd;
-	void concat(char*, char*);
-	mm_segment_t old_fs = get_fs();
-	set_fs(KERNEL_DS);
-	fd = sys_open(fname, O_WRONLY|O_CREAT, 0644);
-	for_each_process(task) {
-		if (task->pid == inp) {
-			fl = 1;
-			printk(KERN_ALERT "\nPARENT PID: %d PROCESS: %s STATE: %ld", task->pid, task->comm, task->state);
-			char out[512];
-			sprintf(out, "\nPID: %d PROCESS: %s STATE: %ld", task->pid, task->comm, task->state);
-			if (fd >= 0) {
-				sys_write(fd, out, strlen(out));
-				file = fget(fd);
-				if (file) {
-					vfs_write(file, out, strlen(out), &pos);
-					fput(file);
-				}
-				sys_close(fd);
-			}
-			else {
-				return -ENOENT;
-			}
-			set_fs(old_fs);
-		}
-	}
-	if (fl == 0) {
-		return -ESRCH;
-	}
-	return 0;
-}
